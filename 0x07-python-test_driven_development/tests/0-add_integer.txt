Test cases for add_integer(a, b=98) function
============================================

The function taks two integers or floats and returns their sum.

Usage
=====
	>>> add_integer = __import__('0-add_integer').add_integer

Adding two positive integers
	>>> add_integer(1, 5)
	6

Adding one positive integer and one negative integer
	>>> add_integer(3, -2)
	1

Adding two negative integers
	>>> add_integer(-10, -6)
	-16

Adding two positive floats
	>>> add_integer(8.8, 2.9)
	10

Adding two negetive floats
	>>> add_integer(-5.8, -2.3)
	-7

Adding float and integer
	>>> add_integer(8.3, 4)
	12

Passing one argument, default value of second argument is 98
	>>> add_integer(3)
	101

Passing a non-integer or a non-float
	>>> add_integer("Allan", 7)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(7, "Allan")
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer(9, [])
	Traceback (most recent call last):
	TypeError: b must be an integer

Passsing no argument
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
